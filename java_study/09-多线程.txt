1. 基础
	线程是两条以上并发运行的部分被称作为线程。
	线程是多任务处理的一部分。另一种多任务的处理是进程。
	多进程程序不受java控制，多线程则受java控制。
	java中的多线程通过管程对多线程运行进行管理。
	仅控制一个线程的盒子，当线程进入管程其他线程必须等待。
2. 主线程
	主线程是产生其他子线程的线程。
	必须最后完成执行，因为它执行各种关闭动作。
	通过currentThread()来获取当前主线程的引用。
3. 创建
	创建线程最简单的方法就是创建一个实现Runnable的接口类。	需要实现run方法，以start方法为线程入口，start是run的一个调用。
	继承Thread类也可以创建一个新的线程，此时必须重载run方法。
4. 使用
	子线程必须先于主线程结束。
	判断线程是否结束：
			isAlive -- 判断子线程是否还在执行。
			join -- 等待所调用的线程结束。
	优先级：可以具有相同的优先级
	线程同步：java通过语言元素进行同步，不需要程序调用操作系统方法。
		  所有对象与之相对应的隐式的管程。
		同步方法：进入管程时会调用被synchronized关键字修饰的方法。此关键字可以防止某些方法重入。
		同步语句：synchronized块，确保了实例成员方法的调用仅仅在当前线程成功进入对应的管程后发生。

5. 多线程通讯
	wait（）--告知被调用的线程放弃管程进入睡眠直到其他线程进入相同管程并且调用notify（）。
	notify（）--恢复相同对象中的第一个调用wait（）的线程。
	notifyAll（）-- 恢复相同对象中的所有调用wait（）的线程。
	
